# 在 crud_template.j2 顶部添加
{% for module, items in imports.items() %}
from {{ module }} import {{ ", ".join(items) }}
{% endfor %}

# CRUD operations for {{ table_name }}
from sqlalchemy.orm import Session
from sqlalchemy import func, text
from sqlalchemy.exc import IntegrityError
from typing import List, Optional, Dict, Any, Union
from datetime import datetime
from .db_models import {{ model_name }}

# 基础 CRUD 操作
def get_{{ table_name }}(db: Session, {{ primary_key.name }}: {{ primary_key.python_type }}):
    return db.query({{ model_name }}).filter({{ model_name }}.{{ primary_key.name }} == {{ primary_key.name }}).first()

def get_{{ table_name }}_list(
    db: Session, 
    skip: int = 0, 
    limit: int = 100, 
    order_by: Optional[str] = None, 
    desc: bool = False,
    filters: Optional[Dict[str, Any]] = None
):
    query = db.query({{ model_name }})
    
    # 应用过滤条件
    if filters:
        for field, value in filters.items():
            if hasattr({{ model_name }}, field):
                query = query.filter(getattr({{ model_name }}, field) == value)
    
    # 应用排序
    if order_by and hasattr({{ model_name }}, order_by):
        if desc:
            query = query.order_by(getattr({{ model_name }}, order_by).desc())
        else:
            query = query.order_by(getattr({{ model_name }}, order_by))
    
    return query.offset(skip).limit(limit).all()

def create_{{ table_name }}(db: Session, {{ params }}):
    db_{{ table_name }} = {{ model_name }}({{ assignments }})
    db.add(db_{{ table_name }})
    try:
        db.commit()
        db.refresh(db_{{ table_name }})
        return db_{{ table_name }}
    except IntegrityError:
        db.rollback()
        raise

def update_{{ table_name }}(
    db: Session, 
    {{ primary_key.name }}: {{ primary_key.python_type }},
    {%- for column in columns %}
    {%- if column['name'] != primary_key.name %}
    {{ column['name'] }}: Optional[{{ column['python_type'] }}] = None,
    {%- endif %}
    {%- endfor %}
):
    db_{{ table_name }} = db.query({{ model_name }}).filter({{ model_name }}.{{ primary_key.name }} == {{ primary_key.name }}).first()
    if db_{{ table_name }}:
        update_data = {
            {%- for column in columns %}
            {%- if column['name'] != primary_key.name %}
            '{{ column['name'] }}': {{ column['name'] }},
            {%- endif %}
            {%- endfor %}
        }
        update_data = {k: v for k, v in update_data.items() if v is not None}
        
        for key, value in update_data.items():
            setattr(db_{{ table_name }}, key, value)
            
        db.commit()
        db.refresh(db_{{ table_name }})
    return db_{{ table_name }}

def delete_{{ table_name }}(db: Session, {{ primary_key.name }}: {{ primary_key.python_type }}):
    db_{{ table_name }} = db.query({{ model_name }}).filter({{ model_name }}.{{ primary_key.name }} == {{ primary_key.name }}).first()
    if db_{{ table_name }}:
        db.delete(db_{{ table_name }})
        db.commit()
        return True
    return False

# 增强型查询操作
def get_{{ table_name }}_by_fields(
    db: Session, 
    fields: Dict[str, Any], 
    limit: int = 1
) -> Optional[{{ model_name }}]:
    """根据多个字段查询单条记录"""
    query = db.query({{ model_name }})
    for field, value in fields.items():
        if hasattr({{ model_name }}, field):
            query = query.filter(getattr({{ model_name }}, field) == value)
    return query.limit(limit).all()

def get_{{ table_name }}_paginated(
    db: Session,
    page: int = 1,
    page_size: int = 20,
    order_by: Optional[str] = None,
    desc: bool = False,
    filters: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """分页查询，返回结果和总数"""
    query = db.query({{ model_name }})
    
    # 应用过滤条件
    if filters:
        for field, value in filters.items():
            if hasattr({{ model_name }}, field):
                query = query.filter(getattr({{ model_name }}, field) == value)
    
    # 应用排序
    if order_by and hasattr({{ model_name }}, order_by):
        if desc:
            query = query.order_by(getattr({{ model_name }}, order_by).desc())
        else:
            query = query.order_by(getattr({{ model_name }}, order_by))
    
    total = query.count()
    results = query.offset((page - 1) * page_size).limit(page_size).all()
    
    return {
        "total": total,
        "page": page,
        "page_size": page_size,
        "results": results
    }

def execute_raw_sql(
    db: Session,
    sql: str,
    params: Optional[Dict[str, Any]] = None
) -> List[Dict[str, Any]]:
    """执行原生SQL查询"""
    result = db.execute(text(sql), params)
    # 修复：正确转换每行结果为字典
    return [dict(row._mapping) for row in result]

def bulk_create_{{ table_name }}(
    db: Session,
    items: List[Dict[str, Any]]
) -> List[{{ model_name }}]:
    """批量创建记录"""
    db_items = [{{ model_name }}(**item) for item in items]
    db.add_all(db_items)
    db.commit()
    return db_items

def bulk_update_{{ table_name }}(
    db: Session,
    items: List[Dict[str, Any]]
) -> int:
    """批量更新记录，每个项目必须包含主键"""
    updated_count = 0
    for item in items:
        primary_value = item.get('{{ primary_key.name }}')
        if primary_value:
            db_item = db.query({{ model_name }}).filter(
                {{ model_name }}.{{ primary_key.name }} == primary_value
            ).first()
            if db_item:
                for key, value in item.items():
                    if hasattr(db_item, key) and key != '{{ primary_key.name }}':
                        setattr(db_item, key, value)
                updated_count += 1
    db.commit()
    return updated_count

def count_{{ table_name }}(db: Session, filters: Optional[Dict[str, Any]] = None) -> int:
    """统计记录数量"""
    query = db.query({{ model_name }})
    if filters:
        for field, value in filters.items():
            if hasattr({{ model_name }}, field):
                query = query.filter(getattr({{ model_name }}, field) == value)
    return query.count()

def group_by_and_aggregate(
    db: Session,
    group_by_field: str,
    aggregate_field: str,
    aggregate_func: str = "count",  # count, sum, avg, min, max
    filters: Optional[Dict[str, Any]] = None
) -> List[Dict[str, Any]]:
    """分组聚合查询"""
    if not hasattr({{ model_name }}, group_by_field) or not hasattr({{ model_name }}, aggregate_field):
        return []
    
    func_map = {
        "count": func.count,
        "sum": func.sum,
        "avg": func.avg,
        "min": func.min,
        "max": func.max
    }
    
    aggregate_func = func_map.get(aggregate_func, func.count)
    
    query = db.query(
        getattr({{ model_name }}, group_by_field),
        aggregate_func(getattr({{ model_name }}, aggregate_field)).label("aggregated_value")
    ).group_by(getattr({{ model_name }}, group_by_field))
    
    if filters:
        for field, value in filters.items():
            if hasattr({{ model_name }}, field):
                query = query.filter(getattr({{ model_name }}, field) == value)
    
    return [{"group": row[0], "value": row[1]} for row in query.all()]